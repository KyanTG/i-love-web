{% render 'partials/head.liquid', title:'homepage' %}

{% render 'partials/header.liquid' %}

<section class="wazzap" >
    {% for file in files %}
        <a href="/voortgang/{{ file | slice:0,-3 }}">{{ file | slice:0,-3 }}</a>
    {% endfor %}
</section>
{{ files | json }}

<section>
    <h1>Progression</h1>
  </section>


  <p>1.Ik kan uitleggenwat NodeJS isen waarvoorhet gebruikt wordt</p>
  <p>NodeJS is een programma waar je custom data kan opslaan en dit kan laten zien door het te fetchen doormiddel van JSserver 2punten</p><br>
  <p>2. Ik weet wat het doel van package.json is en heb hier aanpassingen ingemaakt</p>
  <p>Hiermee kan je Json ophalen in github. 1puntent</p><br>
  <p>3. Ik heb met npm packages geïnstalleerd en gebruikt in het bestand server.js</p>
  <p>npm packages zorgen ervoor dat de server te gebruiken is op een local host. 3punten</p><br>
  <p>4. Ik kan met commando’s in de terminal een NodeJS project stoppen en starten</p>
  <p>ja dit kan ik doormiddel van NPM start. 3 punten</p><br>
  <p>5. Ik weet waarom ik mijn NodeJS project regelmatig moet herstarten en kan dit uitleggen</p>
  <p>dit moet als je aanpassingen maakt in de serverJS 3punten</p><br>
  <p>6. Ik heb een strategie voor debuggen in NodeJS</p>
  <p>ja dit kan ik doormiddel van console log te gebruiken om te testen of het werkt. 3punt</p><br>
  <p>7. Ik kan uitleggen wat Express.js doet en waarom het nodig is om met NodeJS een website te bouwen</p>
  <p>hiermee kan je dingen fetchen en ervoor zorgen dat de server kan runnen 2 punten </p><br>
  <p>8. Ik weet wat routes zijn en kan zelf een nieuwe route aanmaken</p>
  <p>met routes kan je vervolgpaginas aanmaken 3 punten</p><br>
  <p>9. Ik weet wat request en response argumenten zijn ineen functie voor het laden van data</p>
  <p>dit zorgt ervoor dat data opgevraagd kan worden en op een manier verwerkt / verstuurd word 2 punten</p><br>
  <p>10. Ik heb gebruik gemaakt van een request parameter om specifieke data te laden</p>
  <p>ja door met .get te werken 2 punten</p><br>
  <p>11. Ik kan uitleggen wat Liquid doet en waarom het nodig is om met Express.js een website te maken</p>
  <p>met liquid kan je bijvoorbeeld in meerdere pagina's 1 header of footer laden 2 punten</p><br>
  <p>12. Ik weet hoe ik data naar Liquid verstuur om dit te gebruiken bij het renderen van een pagina</p>
  <p>ja dit weet ik dit kan bijvoorbeeld door de json code op te zoeken en deze te typen en zo krijg je de opgevraagde data 3 punten</p><br>
  <p>13. Ik weet hoe ik Liquid filters toe kan passen en waar ik kan vinden hoe die werken</p>
  <p>hiermee kan je bepaalde filters kiezen 2 punten</p><br>
  <p>14. Ik heb een nieuwe route gemaakt en nieuwe data meegegeven aan een Liquid view</p>
  <p>ja dit heb ik gedaan toen we de squadpage gingen maken 2 punten</p><br>
  <p>15. Ik weet waar een foreach loop voor gebruikt wordt en pas het toe in een Liquid view om HTML te renderen</p>
  <p>hiermee kan je een loop bouwen meer weet ik niet 1 punten</p><br>
  <p>16. Ik kan in Liquid een controle maken waarmee de avatar niet getoond wordt als deze niet in whois.fdnd.nl is ingevuld</p>
  <p>nog niet gedaan 1 punten</p><br>
  <p>17. Ik heb een strategie voor debuggen in Liquid</p>
  <p>geen idee 1 punten</p><br>
  <p>18. Ik kan data fetchen uit eenREST API</p>
  <p>- 1 punten</p><br>
  <p>19. Ik snap het verschil tussen HTTP requests van de methodes GET en POST</p>
  <p>bij appget vraag je gegevens op en bij post zorg je dat die verwerkt worden in de route erna 2 punten</p><br>
  <p>20. Ik kan data uit eenREST API filteren of sorteren</p>
  <p>ja doormiddel van een een fetch de gegevens ophalen en die zetten in de post route 2 punten</p><br>
  <p>21. Ik snap wat het async keyword doet inJavaScriptcode</p>
  <p>nee 0 punten</p><br>
  <p>22. Ik weet wat het doel is van een try/catch block en kan het gebruiken bij het parsen van JSON</p>
  <p>geen idee 0 punten</p><br>
  <p>23. Ik begrijp het verschil tussen client-side JavaScript en server-side JavaScript en wanneer ik welke het handigst in kan zetten</p>
  <p>ja opzich wel 1 punt</p><br>
  <p>24. Ik kan formulier data die is ge-POST opslaan ineen variabele op de server en gebruiken bij het renderen van een pagina</p>
  <p>weet even niet hoe ik dit beschrijf 1 punten</p>
  <p>25. Ik kan formulierdata die is ge-POST door middelvan een POST of PATCH HTTP request opslaan in de REST API</p>
  <p>met een sort? heb even geen idee 0 punten</p>







   <article>
    <h1>Mijn Voortgang</h1>
    <h2>hierin laat ik mijn voortgang zien van wat ik per dag heb gemaakt tijdens de opleiding FDND.</h2>
    
    <p>Ik kan uitleggen wat NodeJS is en waarvoor het gebruikt wordt. 2pnt</p>
    <p>Ik weet wat het doel van package.json is en heb hier aanpassingen in gemaakt 2pnt</p>
    <p>Ik heb met npm packages geïnstalleerd en gebruikt in het bestand server.js 2pnt</p>
    <p>Ik kan met commando’s in de terminal een NodeJS project stoppen en starten 3pnt</p>
    <p>Ik weet waarom ik mijn NodeJS project regelmatig moet herstarten en kan dit uitleggen 2pnt</p>
    <p>Ik heb een strategie voor debuggen in NodeJS 2pnt</p>
    <p>Ik kan uitleggen wat Express.js doet en waarom het nodig is om met NodeJS een website te bouwen 3pnt</p>
    <p>Ik weet wat routes zijn en kan zelf een nieuwe route aanmaken 3pnt</p>
    <p>Ik weet wat request en response argumenten zijn in een functie voor het laden van data 2pnt</p>
    <p>Ik heb gebruik gemaakt van een request parameter om specifieke data te laden 2pnt</p>
    <p>Ik kan uitleggen wat Liquid doet en waarom het nodig is om met Express.js een website te maken 3pnt</p>
    <p>Ik weet hoe ik data naar Liquid verstuur om dit te gebruiken bij het renderen van een pagina 3pnt</p>
    <p>Ik weet hoe ik Liquid filters toe kan passen en waar ik kan vinden hoe die werken 2pnt</p>
    <p>Ik heb een nieuwe route gemaakt en nieuwe data meegegeven aan een Liquid view 3 pnt</p>
    <p>Ik weet waar een foreach loop voor gebruikt wordt en pas het toe in een Liquid view om HTML te renderen 3pnt</p>
    <p>Ik kan in Liquid een controle maken waarmee een image niet getoond wordt als deze niet in de database is ingevuld 2pnt</p>
    <p>Ik heb een strategie voor debuggen in Liquid 2 pnt</p>
    <p>Ik kan data fetchen uit een REST API 2 pnt</p>
    <p>Ik snap het verschil tussen HTTP requests van de methodes GET en POST 3pnt </p>
    <p>Ik kan data uit een REST API filteren of sorteren 2pnt</p>
    <p>Ik snap wat het async keyword doet in JavaScript code 2pnt</p>
    <p>Ik weet wat het doel is van een try/catch block en kan het gebruiken bij het parsen van JSON 2pnt</p>
    <p>Ik begrijp het verschil tussen client-side JavaScript en server-side JavaScript en wanneer ik welke het handigst in kan zetten 2 pnt</p>
    <p>Ik kan formulier data die is ge-POST opslaan in een variabele op de server en gebruiken bij het renderen van een pagina 2 pnt</p>
    <p>Ik kan formulier data die is ge-POST door middel van een POST of PATCH HTTP request opslaan in de REST API 2 pnt</p>
</article><br><br><br><br> 

<article>
    <p>Ik begrijp het verschil tussen client-side JavaScript en server-side JavaScript en wanneer ik welke het handigst in kan zetten. Verschil is dat je server side gebruikt voor server en client side meer voor animaties. 2pnt</p> 
    <p>Ik heb een strategie voor server-side JavaScript debuggen, voor client-side JavaScript debuggen, en voor Liquid code debuggen ik doe dit eigenlijk niet het enige wat ik doe is soms de server opnieuw starten en te console loggen. 3pnt</p>
    <p>Ik kan GET en POST routes aanmaken en request parameters gebruiken. dit doe ik doet app.get app.post ik weet hoe dit werkt. 3pnt </p>
    <p>Ik kan server-side JSON data fetchen uit een REST API dit doe ik door een fetch aan te vragen en dit kan ik dan omzetten in liquid 3pnt</p>
    <p>Ik kan data uit een REST API filteren of sorteren. dit doe ik door te kijken welk onderdeel ik nodig heb en deze aan te vragen met een ?=sort of ?=filter 2pnt</p>
    <p>Ik snap wat het async keyword doet in JavaScript code. het async keyword zorgt ervoor dat er andere dingen niet blokkeren tijdens het ophalen van data 1pnt</p>
    <p>Ik weet wat het doel is van een try/catch block en kan het gebruiken bij het parsen van JSON. met try catch kan je iets van data proberen op te halen en als dit niet lukt geef je een andere functie. 2pnt</p>
    <p></p>
    <p>Ik kan multi-page en single-page view transitions inzetten en aanpassen. dit kan door @view-transition met navigation:auto hieraan kan je dan nog custom transition toevoegen met @keyframe animaties. 3pnt</p>
    <p>Ik kan verschillende manieren van responsive images uitleggen en toepassen. dit kan door in je html de image size op te vragen uit de data fetch en daarbij bijvoorbeeld een max-width binnen html te zetten 2pnt.</p>
    <p>Ik weet hoe ik de resultaten van een performance audit moet interpreteren en hoe ik performance problemen kan oplossen. dit doe je door te kijken naar wat het probleem is en dit probleem te analyseren. hierna kan je dit gaan oplossen door dit op te zoeken en toe te passen, of door het toe te passen als je het al weet. 3pnt</p>
    <p>Ik weet hoe ik met client-side JS de UX kan verbeteren, rekening houdend met progressive enhancement. dit kan door bijvoorbeeld eerst basisstyling toe te passen en complexe styling met @supports in CSS. als het dan niet word gesupport dan word de javascript functie niet toegepast 2pnt</p>
    <p>Ik weet hoe ik binnen HTML, CSS en client-side JS nieuwe technieken toe kan passen, rekening houdend met oudere browsers. dit kan door bijvoorbeeld fallback functies te gebruiken. Ook kan je dit doen bijvoorbeeld met img door picture te gebruiken, hierin kan je dan verschillende formaten kiezen en dan word de beste gekozen verschillend per browser. Ook kan je in CSS dit doen door @supports toe te voegen aan complexere en nieuwere code. 2pnt</p>
    <p>Ik weet wat objecten, arrays, strings, loops, variabelen, functies en parameters zijn, en kan die in JavaScript inzetten. Ik weet redelijk wat deze zijn ook omdat ik JS fundamentals heb gevolgd. Ik kan deze redelijk toepassen soms moet ik alleen nog even opzoeken hoe ze precies perfect toepast. 2pnt</p>
    <p>Ik weet wat geavanceerdere concepten in JavaScript zijn, zoals closures, promises, callbacks, scope en de event loop. callback functie is een backup functie voor als er iets niet werkt op een oudere device of browser maar de rest weet ik niet 1pnt</p>
    <p>Ik kan via GitHub met feature branches werken, pull requests aanmaken, reviewen en mergen. dit hebben wij nog niet gehad 1pnt</p>
    <p>Ik weet hoe ik formulieren pro-actief kan valideren met client-side code. Dit kan je doen door te console loggen wat er gebeurd zodra je op de form klikt op de website 2pnt</p>
    <p>Ik weet de eerste regel van ARIA, en wat dat betekent voor hoe ik HTML schrijf. Ja dit is dat je het niet gebruikt voor attributen die het al vanzelf hebben zoals buttons. met een aria label kan je een rol geven 2pnt</p>
    <p>Ik weet wat layout shifts zijn, door wat ze veroorzaakt worden, hoe ik ze kan meten en hoe ik ze kan oplossen. Je kan ze meten door je chaching in je web op 3g te zetten en dan kan je zien wat er gebeurt, dit kan je bijvoorbeeld vermijden door grote images een lazy loading te geven of een skeleton state 3pnt</p>
    <p>Ik weet wat de Core Web Vitals zijn, hoe ik die kan meten, en hoe ik de cijfers moet interpreteren 0pnt</p>
    <p>Ik weet hoe perceived performance invloed heeft op de beleving van een gebruiker, en ik heb de ontwerp- en code vaardigheden om die toe te passen. ja door testen en de testresultaten te verwerken 2pnt</p>
    <p>Ik kan UI states in meerdere lagen van progressive enhancement inzetten om de UX te verbeteren. Ja door bijvoorbeeld te beginnen met simpele animaties die op elk device worden ondersteund 2pnt</p>
    <p>Ik kan een UI leuker en prettiger maken, zonder de core functionaliteit uit het oog te verliezen. Ja door bijvoorbeeld met @supports te werken voor complexe animaties op dde core functionaliteit 2pnt</p>
    <p>Ik kan scroll-driven animations inzetten om de UI beter te maken, ja maar nog niet echt toegepast weet wel hoe het werkt. 2pnt</p>
    <p>Ik weet hoe ik verschillende vormen van feature detection in kan zetten in HTML, in CSS en in client-side JS. Ja bijvoorbeeld met input types, @supports en if & else 2pnt</p>
</article>
</body> 